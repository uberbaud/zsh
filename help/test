\e[1mCONDITIONAL EXPRESSIONS\e[22m

       A conditional expression is used with the [[ compound command to test
       attributes of files and to compare strings.  Each expression can be
       constructed from one or more of the following unary or binary
       expressions:

       \e[1m-a\e[22m \e[4mfile\e[24m
              true if file exists.

       \e[1m-b\e[22m \e[4mfile\e[24m
              true if file exists and is a block special file.

       \e[1m-c\e[22m \e[4mfile\e[24m
              true if file exists and is a character special file.

       \e[1m-d\e[22m \e[4mfile\e[24m
              true if file exists and is a directory.

       \e[1m-e\e[22m \e[4mfile\e[24m
              true if file exists.

       \e[1m-f\e[22m \e[4mfile\e[24m
              true if file exists and is a regular file.

       \e[1m-g\e[22m \e[4mfile\e[24m
              true if file exists and has its setgid bit set.

       \e[1m-h\e[22m \e[4mfile\e[24m
              true if file exists and is a symbolic link.

       \e[1m-k\e[22m \e[4mfile\e[24m
              true if file exists and has its sticky bit set.

       \e[1m-n\e[22m \e[4mstring\e[24m
              true if length of string is non-zero.

       \e[1m-o\e[22m \e[4moption\e[24m
              true if option named option is on.  option may be a single
              character, in which case it is a single letter option name.
              (See the section `Specifying Options'.)

       \e[1m-p\e[22m \e[4mfile\e[24m
              true if file exists and is a FIFO special file (named pipe).

       \e[1m-r\e[22m \e[4mfile\e[24m
              true if file exists and is readable by current process.

       \e[1m-s\e[22m \e[4mfile\e[24m
              true if file exists and has size greater than zero.

      \e[1m-t\e[22m \e[4mfd\e[24m
              true if file descriptor number fd is open and associated with a
              terminal device.  (note: fd is not optional)

       \e[1m-u\e[22m \e[4mfile\e[24m
              true if file exists and has its setuid bit set.

       \e[1m-w\e[22m \e[4mfile\e[24m
              true if file exists and is writable by current process.

       \e[1m-x\e[22m \e[4mfile\e[24m
              true if file exists and is executable by current process.  If
              file exists and is a directory, then the current process has
              permission to search in the directory.

       \e[1m-z\e[22m \e[4mstring\e[24m
              true if length of string is zero.

       \e[1m-L\e[22m \e[4mfile\e[24m
              true if file exists and is a symbolic link.

       \e[1m-O\e[22m \e[4mfile\e[24m
              true if file exists and is owned by the effective user ID of
              this process.

       \e[1m-G\e[22m \e[4mfile\e[24m
              true if file exists and its group matches the effective group ID
              of this process.

       \e[1m-S\e[22m \e[4mfile\e[24m
              true if file exists and is a socket.

       \e[1m-N\e[22m \e[4mfile\e[24m
              true if file exists and its access time is not newer than its
              modification time.

       \e[4mfile1\e[24m \e[1m-nt\e[22m \e[4mfile2\e[24m
              true if file1 exists and is newer than file2.

       \e[4mfile1\e[24m \e[1m-ot\e[22m \e[4mfile2\e[24m
              true if file1 exists and is older than file2.

       \e[4mfile1\e[24m \e[1m-ef\e[22m \e[4mfile2\e[24m
              true if file1 and file2 exist and refer to the same file.

       \e[4mstring\e[24m \e[1m=\e[22m \e[4mpattern\e[24m
       \e[4mstring\e[24m \e[1m==\e[22m \e[4mpattern\e[24m
              true if string matches pattern.  The `==' form is the preferred
              one.  The `=' form is for backward compatibility and should be
              considered obsolete.


       \e[4mstring\e[24m \e[1m!=\e[22m \e[4mpattern\e[24m
              true if string does not match pattern.

       \e[4mstring\e[24m \e[1m=~\e[22m \e[4mregexp\e[24m
              true if string matches the regular expression regexp.  If the
              option RE_MATCH_PCRE is set regexp is tested as a PCRE regular
              expression using the zsh/pcre module, else it is tested as a
              POSIX extended regular expression using the zsh/regex module.
              Upon successful match, some variables will be updated; no
              variables are changed if the matching fails.

              If the option BASH_REMATCH is not set the scalar parameter MATCH
              is set to the substring that matched the pattern and the integer
              parameters MBEGIN and MEND to the index of the start and end,
              respectively, of the match in string, such that if string is
              contained in variable var the expression `${var[$MBEGIN,$MEND]}'
              is identical to `$MATCH'.  The setting of the option KSH_ARRAYS
              is respected.  Likewise, the array match is set to the
              substrings that matched parenthesised subexpressions and the
              arrays mbegin and mend to the indices of the start and end
              positions, respectively, of the substrings within string.  The
              arrays are not set if there were no parenthesised
              subexpresssions.  For example, if the string `a short string' is
              matched against the regular expression `s(...)t', then (assuming
              the option KSH_ARRAYS is not set) MATCH, MBEGIN and MEND are
              `short', 3 and 7, respectively, while match, mbegin and mend are
              single entry arrays containing the strings `hor', `4' and `6',
              respectively.

              If the option BASH_REMATCH is set the array BASH_REMATCH is set
              to the substring that matched the pattern followed by the
              substrings that matched parenthesised subexpressions within the
              pattern.

       \e[4mstring1\e[24m \e[1m<\e[22m \e[4mstring2\e[24m
              true if string1 comes before string2 based on ASCII value of
              their characters.

       \e[4mstring1\e[24m \e[1m>\e[22m \e[4mstring2\e[24m
              true if string1 comes after string2 based on ASCII value of
              their characters.

       \e[4mexp1\e[24m \e[1m-eq\e[22m \e[4mexp2\e[24m
              true if exp1 is numerically equal to exp2.  Note that for purely
              numeric comparisons use of the ((...)) builtin described in the
              section `ARITHMETIC EVALUATION' is more convenient than
              conditional expressions.

       \e[4mexp1\e[24m \e[1m-ne\e[22m \e[4mexp2\e[24m
              true if exp1 is numerically not equal to exp2.
       \e[4mexp1\e[24m \e[1m-lt\e[22m \e[4mexp2\e[24m
              true if exp1 is numerically less than exp2.

       \e[4mexp1\e[24m \e[1m-gt\e[22m \e[4mexp2\e[24m
              true if exp1 is numerically greater than exp2.

       \e[4mexp1\e[24m \e[1m-le\e[22m \e[4mexp2\e[24m
              true if exp1 is numerically less than or equal to exp2.

       \e[4mexp1\e[24m \e[1m-ge\e[22m \e[4mexp2\e[24m
              true if exp1 is numerically greater than or equal to exp2.

       \e[1m(\e[22m \e[4mexp\e[24m \e[1m)\e[22m
              true if exp is true.

       \e[1m!\e[22m \e[4mexp\e[24m
              true if exp is false.

       \e[4mexp1\e[24m \e[1m&&\e[22m \e[4mexp2\e[24m
              true if exp1 and exp2 are both true.

       \e[4mexp1\e[24m \e[1m||\e[22m \e[4mexp2\e[24m
              true if either exp1 or exp2 is true.

       For compatibility, if there is a single argument that is not
       syntactically significant, typically a variable, the condition is
       treated as a test for whether the expression expands as a string of
       non-zero length.  In other words, \e[32m[[ $var ]]\e[0m is the same as
       \e[32m[[ -n $var ]]\e[0m.  It is recommended that the second, explicit, form be
       used where possible.

       Normal shell expansion is performed on the file, string and pattern
       arguments, but the result of each expansion is constrained to be a
       single word, similar to the effect of double quotes.

       Filename generation is not performed on any form of argument to
       conditions.  However, it can be forced in any case where normal shell
       expansion is valid and when the option EXTENDED_GLOB is in effect by
       using an explicit glob qualifier of the form (#q) at the end of the
       string.  A normal glob qualifier expression may appear between the `q'
       and the closing parenthesis; if none appears the expression has no
       effect beyond causing filename generation.  The results of filename
       generation are joined together to form a single word, as with the
       results of other forms of expansion.

       This special use of filename generation is only available with the [[
       syntax.  If the condition occurs within the [ or test builtin commands
       then globbing occurs instead as part of normal command line expansion
       before the condition is evaluated.  In this case it may generate
       multiple words which are likely to confuse the syntax of the test
       command.

       For example,

              \e[32m[[ -n file*(#qN) ]]\e[0m

       produces status zero if and only if there is at least one file in the
       current directory beginning with the string `file'.  The globbing
       qualifier N ensures that the expression is empty if there is no
       matching file.

       Pattern metacharacters are active for the pattern arguments; the
       patterns are the same as those used for filename generation, see
       zshexpn(1), but there is no special behaviour of `/' nor initial dots,
       and no glob qualifiers are allowed.

       In each of the above expressions, if file is of the form `/dev/fd/n',
       where n is an integer, then the test applied to the open file whose
       descriptor number is n, even if the underlying system does not support
       the /dev/fd directory.

       In the forms which do numeric comparison, the expressions exp undergo
       arithmetic expansion as if they were enclosed in $((...)).

       For example, the following:

              \e[32m[[ ( -f foo || -f bar ) && $report = y* ]] && print File exists.\e[0m

       tests if either file foo or file bar exists, and if so, if the value of
       the parameter report begins with `y'; if the complete condition is
       true, the message `File exists.' is printed.

