# @(#)[:Ap$)AX3uRfcc&*eNcFG&: 2017/08/01 17:35:19 tw@csongor.lan]
# vim: filetype=zsh tabstop=4 textwidth=72 noexpandtab nowrap

# SYNOPSIS: Create all of the needed variables and functions.
# TODO: start from elsewhere

emulate -L zsh
setopt local_options local_traps pipe_fail bsd_echo

needs aucat audioctl autopage awk ffmpeg mediainfo sed sqlite3
needs ${LOCALBIN}/watch-file fullstop :-:amuse-env requires-write

:-:amuse-env # set the environment

test -f $amuse_db   || die "No such file %B${amuse_db:gs/%/%%}%b."
test -f $amuse_bin  || die "No such file %B${amuse_bin:gs/%/%%}%b."
# requires-write expects variable names not their expansion
requires-write	now_playing paused_at paused_song skipped_bytes \
				final again amuse_pid fflog music_list

test -s $music_list || cat > $music_list <<----
	; vim: ft=lst nospell nowrap fo-=a tw=0
	---

function msecToHMMSS {
	integer msecs=$(($1%1000)) seconds=$(($1/1000)) minutes=0 hours=0
	((minutes=seconds/60,seconds%=60))
	((hours=minutes/60,minutes%=60))
	if ((hours)); then
		printf '%d:%0.2d:%0.2d.%0.3d' $hours $minutes $seconds $msecs
	else
		printf '%d:%0.2d.%0.3d' $minutes $seconds $msecs
	fi
}

function a1 {
	[[ -s $amuse_pid ]]&& fullstop 'Already playing'
	setopt local_options local_traps

	local song=$1 atTime=${2:-0.000}
	((atTime))|| : >$skipped_bytes # clear if we're starting over
	[[ $song == /* ]]|| song=${XDG_MUSIC_DIR}/$song
	[[ -r $song ]]|| fullstop "Can't play song: $song."

	local banner=${${song#$XDG_MUSIC_DIR/}%.*}
	(($#banner>COLUMNS-6))&& banner="…${(l.COLUMNS-7.)banner}"
	print -Pu 2 '  %F{4}>>>%f '${banner:gs/%/%%}
	# clean up last times mess
	: >$paused_song
	: >$paused_at
	# set up device (if possible)
	local minf=( $(mediainfo --Output='Audio;%SamplingRate% %Channels%') )
	audioctl -q rate=${minf[1]:41000} play.channels=${minf[2]:-2} 2>/dev/null
	# get actual device settings and use those for best efficiency
	local cfg=( $(audioctl -n rate play.channels encoding) )
	local ffopts=( -y -loglevel 'error' -ar $cfg[1] -ac $cfg[2] -f $cfg[3] - )
	local auopts=( -f snd/0 -r $cfg[1] -e $cfg[3] -h raw -i - )

	echo ${song#$XDG_MUSIC_DIR/} > $now_playing
	( # workaround to keep zsh from printing job information to tty
		jobs -Z $amusePlayerId
		integer audio_pipe_pid=0
		# PAUSE (stop but save position, can be used for STOPping too).
		function TRAPHUP TRAPINT TRAPQUIT TRAPABRT TRAPKILL TSTP {
			float -F 3 bytes secs
			float rate=$cfg[1] chans=$cfg[2] bps=${${cfg[3]#[fsu]}%[bl]e}
			audioctl -n play.bytes | read bytes
			cat $now_playing >$paused_song
			((secs=bytes/(rate*chans*(bps/8.0))))
			echo $secs >$paused_at
			echo $((bytes+${$(<$skipped_bytes):-0})) >$skipped_bytes
			kill $audio_pipe_pid
		}
		# SKIP the rest of this song.
		function TRAPUSR1 { kill $audio_pipe_pid; }
		# FINISH this song AND then STOP
		ffmpeg -ss $atTime -i $song $ffopts 2>>$fflog |
			aucat $auopts &
		audio_pipe_pid=$! # name needed for the trap function
		wait $audio_pipe_pid
		: >$amuse_pid
		: >$now_playing
	)&!
	echo $! >$amuse_pid
	${LOCALBIN}/watch-file $amuse_pid
	: > $now_playing
}

function d {
	if (($#)); then
		typeset -- key="$*" NL=$'\0'
		# escape quotes for SQL
		key="${key//\'/\'\'}"

		sqlite3 $amuse_db <<---- | read -r -d$'\x00'
			SELECT replace(replace( performer,   '\','\\'),'${NL}','\n'),
				   replace(replace( album,       '\','\\'),'${NL}','\n'),
				   replace(replace( title,       '\','\\'),'${NL}','\n'),
				                    duration
		  	FROM mediainfo
		 	WHERE title LIKE '%${key}%'
			;
		---
		local i=( "${(f)RESULT}" );

	else
		local f="$(<$now_playing)"
		[[ -s $f ]]|| fullstop 'No current song.'
		local o=( Performer Album Title Duration )
		local i=(
			"$(mediainfo --Output='General;%'${(j:%|%:)o}'%' $f)"
		  )
	fi
	local s=() secs=''
	for I in $i; do
		s=( "${(@s.|.)I}" )
		secs=${s[4]:-\?}
		[[ $secs == \? ]]|| secs=$(msecToHMMSS $s[4])
		printf '  %s (%s) %s\n' ${s[3]:-\?} ${s[1]:-\?} $secs
	done
}

function t {
	needs ${amuse_home}/prac/time-played
	echo
	echo
	export skipped_bytes paused_at
	${amuse_home}/prac/time-played
}

function \\dequeue {
	local c=()
	local t=( ${(f)"$(<$music_list)"} )
	local s=$t[1]
	while [[ $s == ';'* ]]; do
		c+=($s)
		shift t
		s=$t[1]
	done
	[[ -n $s ]]|| fullstop 'Queue is empty'

	[[ $s == /* ]]|| s=${XDG_MUSIC_DIR}/$s
	printf '%s' $s
	printf '%s\n' ${(F)c} ${(F)t[2,-1]} >$music_list
  }

function + \\queue {
	local reply
	:-:music-in-fs $@
	printf '%s\n' ${(F)reply} >>$music_list
  }

function ++ \\push {
	local reply
	:-:music-in-fs $@
	local c=()
	local t=( ${(f)"$(<$music_list)"} )
	local s=$t[1]
	while [[ $s == ';'* ]]; do
		c+=($s)
		shift t
		s=$t[1]
	done
	[[ -n $s ]]&& t=( $s $t )
	printf '%s\n' ${(F)c} ${(F)reply} ${(F)t[2,-1]} >$music_list
}

function \\album {
	:-:music-in-fs ${music_dir}/*/${1}/*
	reply=( ${(f)"$(sort -nt / -k 3 <<<"${(F)reply}")"} )
}

function +a +album +A {
	local albumsongs=() a=''
	for a { \\album $a; albumsongs+=( $reply ); }
	\\queue $albumsongs
}

function ++a ++album ++A {
	local albumsongs=() a=''
	for a { \\album $a; albumsongs+=( $reply ); }
	\\push $albumsongs
}

function \\next-song {
	if [[ -s $again ]]; then
		: >$again
	else
		typeset -g $1="$(\\dequeue)"
	fi
}

function p {
	[[ -s $amuse_pid ]]&& fullstop 'Already playing'

	# resume if there is anything to resume
	[[ -s $paused_at ]]&& {
		if (($#)); then
			yes-or-no 'Continue previously paused song'
			((!?))&&
				a1 "$(<$paused_song)" $(<$paused_at)
		else
			a1 "$(<$paused_song)" $(<$paused_at)
		fi
	}

	# push any new songs
	(($#))&& \\push $@

	# then play the list!
	local s; \\next-song s
	while [[ -n $s ]]; do
		[[ -s $final ]]&& {
			: >$final
			return
		  }
		a1 $s
		[[ -s $paused_at ]]&& return # stop if we asked to stop
		if [[ -s $again ]]; then
			: >$again
		else
			\\next-song s
		fi
	done
  }

function l {
	(($#))&& {
		:-:music-in-fs $@
		printf '  %s\n' ${reply%.*}
		return
	}
	typeset -a pgm=(
		'/^; =[^=]+=/'
			'{ sub("^[^=]*=", ""); sub("=.*$",""); print "#", $0; }'
		'/^;/' '{ next; }'
		'NF==3'
			'{'
				'if ($1 != group) { group=$1; album=""; print "  "group; }'
				'if ($2 != album) { album=$2; print "      "album; }'
				'sub( "\.[^.]+$", "", $3 );'
				'print "          "$3;'
				'next;'
			'}'

	  )
	autopage awk -F'/' "$pgm"  "$music_list"
}

function \\LG {
	awk -F/ '/^[^;]/ { i=NF-2; if (!bands[$i]++) print $i; }' $music_list
}
function lg { autopage \\LG; }

function N {
	cd $music_dir

	local F=${amuse_run}/last-letter
	[[ -s $F ]]|| echo 'Z'>$F

	local -u current="$(<$F)"
	[[ $current =~ '^[A-Z#]$' ]]||
		die "Unexpected last-letter: %B<${F:gs/%/%%}>%b."

	local -u next='#'
	local pattern='^A-Za-z'
	if [[ $current == '#' ]]; then
		next='A'
	else
		integer asc=$(printf '%d' \'$current)
		((asc<90)) && {
			next="$( printf "\x$(printf '%x\n' $((asc+1)) )" )"
			pattern=${(U)next}${(L)next}
		  }
	fi

	printf '  Adding \e[35m%s\e[39m\n' $next
	\\queue [$pattern]*
	lg
}

function v {
	local snap='snapshot.lst' edit='music.lst (editing)'
	cp $music_list $snap
	cp $snap $edit
	command v $edit

	local edited="$(<$edit)"
	local deleted=( ${(f)"$(diff -e $music_list $snap)"} )
	rm $snap $edit

	if (($#deleted)); then # ¿aMuse? changed the $music_list
		[[ $deleted[1] =~ '[0-9][0-9]*a' ]]||
			-die 'Unexpted %Tdiff%t output:' $deleted
		[[ $deleted[-1] == '.' ]]||
			-die 'Unexpted %Tdiff%t output:' $deleted
		shift deleted
		shift -p deleted

		local delblock=${(F)deleted}
		local edited="${edited:s/$delblock/}"
	fi

	# save changes
	printf '%s\n' $edited >$music_list

	lg
}

function h {
	typeset B=$'\e[1m';		b=$'\e[22m'
	typeset S=$'\e[34m';	s=$'\e[39m'
	typeset N=$'\e[0m'
	cat <<----
	  Using the %Bplaylist%b
	    +  => Append songs from the paths given on command line.
	    ++ => Like ${B}+${b}, except prepend.
	    +a,++a
	       => As above but with album names.
	    p  => PLAY: add and play songs.
	    l  => List songs from command line or in ${B}playlist${b}.
	    N  => Add songs *next* letter in alphabet.
	    l  => List %Bsongs%b.
	    lg => List %Bgroups%b.
	    v  => Edit.
	  Other
	    d  => Show info for currently playing song or on command line.
	    t  => Show time played for song playing.
	    r  => Renew ${B}amuse${b} functions from \$Z/functions/amuse.
	    u  => Unset all of the special amuse bits.
	---
}

function cd { (($#))|| set $music_dir; builtin cd "$@"; }
function cls {
	print -u 2 -f '\e[0;0H\e[2J\e[3J'
	local fmt="\e[1;44;37m%${COLUMNS}s\r ├┤ %.$((COLUMNS-8))s ├┤\e[0m\n"
	[[ $PWD == $music_dir && $# -eq 1 && $1 == ? ]]&& {
			local C='' X=''
			if [[ $1 == [A-Za-z] ]]; then
				C=${(U)1}${(L)1}
				X=$C
			else
				C='^A-Za-z'
				X='#'
			fi
			printf $fmt '' $X >&2
			eval "colorls -d [$C]*"
			return
	}
	(($#))&& {
		printf $fmt '' "$*" >&2
		colorls $@
		return
	}
	# not in $music_dir or a subdirectory thereof
	[[ ${PWD}/ == ${music_dir}/* ]]|| {
		clear colorls $@
		return
	}
	# in a subdirectory $music_dir
	[[ $PWD == $music_dir ]]|| {
		local D=${PWD##*/}
		print -u 2 -f "\e[1;44;37m%${COLUMNS}s\r ├┤ %s ├┤\e[0m\n" '' $D
		:-:music-in-fs $PWD
		printf '  %s\n' $reply
		return
	}
	# in $music_dir itself
	# get one (1) octet (value 0-255)
	local b="$(dd bs=1 count=1 status=none if=/dev/urandom)"
	# convert that to an integer, but don't declare it as such because 
	# that encourages ZSH to do float conversions (see below)
	local i="$(printf '%d' \'$b)"
	# because ZSH will sometimes do internal conversions with floats 
	# that have a fixed mantissa size and so the result will MAY be 
	# outside the range A-Z if many calculations are combined.
	# THIS WORKS AS IS!!!
	local R=$((255./26.))	# ratio of alphabet to octet
	local a=$(($i./$R))		# convert 0-255 => 0-25 (A-Z) or (a-z)
	a=${a%.*}				# truncate
	local upperHex="$( printf %x $(($a+65)) )"
	local lowerHex="$( printf %x $(($a+97)) )"
	local A=$( printf "\x${upperHex}\x${lowerHex}" )
	print -u 2 -f "\e[1;44;37m%${COLUMNS}s\r ├┤ %s ├┤\e[0m\n" '' $A
	ls -d [$A]*
}
function r { . $Z/functions/amuse; }
function u {
	warn 'Removing %F{4}amuse%f functions.'
	precmd_functions=( "${(@)precmd_functions:#ps1-amuse-info}" )
	set_prompt
	unset -f + ++ N \\LG \\dequeue \\push \\queue a1 d h l lg p r t u v
	unset -f amuse cd msecToHMMSS ps1-amuse-info cls
	unset -f \\album +a +album +A ++a ++album ++A
	function amuse { builtin autoload -XUz; }
	alias cls='clear ls'
	cd $PRE_AMUSE_PWD
}

function ps1-amuse-info {
	integer count="$(egrep -v '^;' $music_list | wc -l)"
	local info="($count) "
	[[ -s $paused_at ]]&&	info+='PAUSED '
	[[ -s $final ]]&&		info+='FINAL '
	[[ -s $again ]]&&		info+='AGAIN '
	psvar[2]=$info
}
precmd_functions+=( ps1-amuse-info )
PS1='%K{3}%F{7}%B amuse %b%2v%f%k%s '
PRE_AMUSE_PWD=${PRE_AMUSE_PWD:-$PWD}
[[ ${PWD}/ == ${music_dir}/* ]]|| cd $music_dir
unalias cls

# Copyright © 2017 by Tom Davis <tom@greyshirt.net>.
