#!/usr/bin/env zsh
# $Id: show,v 1.8 2016/10/25 07:47:28 tw Exp $
# vim: filetype=zsh tabstop=4 textwidth=72 noexpandtab

emulate -L zsh

[[ $# -eq 0 ]] && die 'Usage `show %Uvarname%u`'
[[ $# -gt 1 ]] && die 'To many parameters, one (1) expected.'
[[ $1 == <-> ]] && { s $@; return 0; }
[[ ${1:0:1} == [[:digit:]] ]] && die 'Not a valid identifier.'

[[ -z ${(Pt)1} ]] && die 'Variable %B'$1'%b is not set'

if   [[ ${(Pt)1} == 'scalar'* ]]; then
	print -P " %B$1%b is a %B${(Pt)1}%b with a value of:"
	set $1 ${(PVqq)1}
	if (( $#2 > $((COLUMNS-4)) )); then
		print -r '  '${${(PVqq)1}:0:$COLUMNS-5}'â€¦'
	else
		print -r "  ${(PVqq)1}"
	fi
elif [[ ${(Pt)1} == 'integer'* ]]; then
	print -P " %B$1%b is an %B${(Pt)1}%b with a value of %B${(P)1}%b."
elif [[ ${(Pt)1} == 'float'* ]]; then
	print -P " %B$1%b is a %B${(Pt)1}%b with a value of %B${(P)1}%b."
elif [[ ${(Pt)1} == 'array'* ]]; then
	print -P " %B$1%b is an %B${(Pt)1}%b with %B${(P)#1}%b elements"
	if [[ $1 == 'i' ]]; then
		typeset -i x
		for (( x=1; x<=${(P)#1}; x++ )); do
			print -f ' %4d: %-*s\n' $x $((LINES-8)) ${(PVqq)1[$x]}
		done
	else
		typeset -i i
		for (( i=1; i<=${(P)#1}; i++ )); do
			print -f ' %4d: %-*s\n' $i $((LINES-8)) ${(PVqq)1[$i]}
		done
	fi
elif [[ ${(Pt)1} == 'association'* ]]; then
	print -P " %B$1%b is an %B${(Pt)1}%b with %B${(P)#1}%b elements"
	if [[ $1 == 'i' ]]; then
		typeset -i x=${#${(PkO@)1//?/X}[1]}+2
		print -f "   %-${x}s: %.$((COLUMNS-x-7))s\n" ${(PkvqqqV)1} | sort
	else
		typeset -i i=${#${(PkO@)1//?/X}[1]}+2
		print -f "   %-${i}s: %.$((COLUMNS-i-7))s\n" ${(PkvqqqV)1} | sort
	fi
else
	print -P " %B$1%b is of type %B${(Pt)1}%b (unknown format)."
fi


# Copyright (C) 2016 by Tom Davis <tom@greyshirt.net>.
