#!/usr/bin/env zsh
# @(#)[:7,4Vj{r{)EKZYZ+!Qi@+: 2017/07/07 17:04:50 tw@csongor.lan]
# vim: filetype=zsh tabstop=4 textwidth=72 noexpandtab nowrap

emulate -L zsh

# Because this function expects a variable *name* in $1, and that name 
# could be anything, this function only uses positional variables which 
# are aliases into $argv, $@, or $*. Plus, things that would normally be 
# stuffed into variables for better documentation and easier maintenance 
# are instead kept as literals, even when appearing at multiple places 
# in the function.

# VALIDATE ARGS
[[ $# -eq 0 ]] && die 'Usage `showvar %Uvarname%u`'
[[ $# -gt 1 ]] && die 'Too many parameters, one (1) expected.'
[[ $1 == <-> || $1 == 'argv' || $1 == \@ || $1 == \* ]]&& {
	die '%BScript argv%b is not available within a function.'
  }
[[ ${1:0:1} =~ [^[:word:]] ]] && die 'Not a valid identifier.'

# DO REAL WORK
set $1 ${(Pt)1}
[[ -z $2 ]] && die 'Variable %B'$1'%b is not set'

# var is a NUMBER
[[ $2 =~ 'integer|float' ]]&& {
	print -P " %B$1%b is an %B$2%b with a value of %B${(P)1}%b."
	return 0
  }

# var is a STRING
[[ $2 == 'scalar'* ]]&& {
	print -P " %B$1%b is a %B$2%b with a value of:"
	2=${(PVqq)1}
	(( (COLUMNS-2)<$#2 ))&& 2=${2:0:$COLUMNS-3}$'\e[0;47;5;36m…\e[0m'
	print -r '  '$2
	return 0
  }

# var is a new unknown type
[[ $2 =~ 'array|association' ]]|| {
	print -P " %B$1%b is of type %B$2%b (unknown format)."
	return 1
  }

# var is a CONTAINER
3='elements,'
((${(P)#1}==1))&& 3='element,'
print -P " %B$1%b is an %B$2%b with %B${(P@)#1}%b "$3

# container is an ARRAY
[[ $2 == 'array'* ]]&& {
	2=1
	3=$((COLUMNS-8))
	while (( $2<=${(P)#1} )); do
		4=${(PVqq)1[$2]}
		(($3<$#4))&& 4=${4:0:$3}$'\e[0;47;5;36m…\e[0m'
		printf " %4d: %-${3}s\n" $2 $4
		2=$(($2+1))
	done
	return 0
  }

# container is a DICTIONARY
[[ $2 == 'association'* ]]&& {
	# get the length of the longest key workaround, zsh has a bug that 
	# keeps it from handling (P) on a positional name in multiple levels 
	# of ${…} when we're also assigning to a positional, so use set 
	# twice.
	set $1 ${(PkO@)1//?/X}
	set $1 $((COLUMNS-($#2+7))) "  %-$(( $#2 + 2 ))s: %s\n" key val
	for 4 5 in "${(Pkv@)1}"; do
		5=${(qqqV)5}
		(($2<$#5))&& 5=${5:0:$2}$'\e[0;47;5;36m…\e[0m'
		printf $3 ${(qqqV)4} $5
	done | sort
	return 0
  }

# Copyright (C) 2016 by Tom Davis <tom@greyshirt.net>.
